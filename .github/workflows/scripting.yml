name: scripting
on:
  workflow_dispatch:
    inputs:
      context:
        type: string
        description: nullplatform service lifecycle webhook context
        required: true
permissions:
  id-token: write
  contents: read
  packages: read
jobs:
  provisioning:
    runs-on: self-hosted
    env:
      NP_ACTION_CONTEXT: ${{ inputs.context }}
    steps:
      - name: Install nullplatform cli
        run: echo $DOCKER_PASSWORD | sudo -S curl https://cli.nullplatform.com/install.sh | sudo -S sh
      - name: Checkout code
        uses: actions/checkout@v4
        id: checkout-code
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install Gomplate
        run: npm install -g gomplate
      - name: Install Kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.2'
          id: install
      - name: Prepare event data
        uses: actions/github-script@v7
        id: prepare-event-data
        with:
          script: |
            const prepare = require('./.github/workflows/scripts/prepare-script.js');
            prepare({ core });
      - name: Log Script
        run: echo $SCRIPT_PATH
      - name: Install oc
        uses: redhat-actions/oc-installer@v1
        with:
          oc_version: '4.6'
      - name: Execute Script
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.REGION }}
          NP_API_KEY: ${{ secrets.NP_API_KEY }}
          OPENSHIFT_ROSA_SERVER: ${{ vars.OPENSHIFT_ROSA_SERVER }}
          OPENSHIFT_ROSA_SECRET: ${{ secrets.OPENSHIFT_ROSA_SECRET }}
        run: source $SCRIPT_PATH
      - name: Update entity status
        if: ${{ always() }}
        id: nullplatform-update-entity-status
        env:
          NULLPLATFORM_API_KEY: ${{ secrets.NULLPLATFORM_API_KEY }}
        run: |
          if [[ $LINK_ID ]]; then
            np link action update --status ${{ contains(fromJSON('["failure", "cancelled"]'), job.status) && 'failed' || 'success' }} --messages '[]' --results '{}'
          elif [[ $SERVICE_ID ]]; then
            np service action update --status ${{ contains(fromJSON('["failure", "cancelled"]'), job.status) && 'failed' || 'success' }} --messages '[]' --results '{}'
          fi